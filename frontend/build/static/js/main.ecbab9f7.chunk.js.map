{"version":3,"sources":["todoList.tsx","authPage.tsx","feathers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","useState","newTaskText","setNewTaskText","tasks","setTasks","className","type","onChange","event","target","value","onClick","text","id","Math","random","trimStart","isDone","sort","a","b","map","task","ix","key","checked","newStatus","filter","taskId","OPEN_SOURCE_GITHUB_IMAGE","LoginBlock","isRegistration","setIsRegistration","src","width","height","auth","require","rest","feathersApp","feathers","restClient","tryGetAccessToken","authentication","getAccessToken","token","console","log","getFromLocation","window","location","then","info","setAccessToken","Promise","resolve","catch","e","configure","fetch","storageKey","App","user","setUser","useEffect","authenticate","userData","to","email","path","component","Boolean","hostname","match","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ecbab9f7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './todoList.css';\nimport { Task } from './task';\n\n\nfunction TodoList() {\n  const [newTaskText, setNewTaskText] = useState<string>('');\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  const onAdd = (text: string) => {\n    if (text === '') {\n      return;\n    };\n\n    setTasks([\n      ...tasks,\n      {\n        id: Math.random() * 100000,\n        text: text.trimStart(),\n        isDone: false,\n      }\n    ]);\n    setNewTaskText('');\n  };\n\n  const onDeleteClick = (taskId: number) => {\n    setTasks(tasks.filter(task => task.id != taskId));\n  };\n  \n  const onTaskToggle = (id: number, newStatus: boolean) => {\n    const task = tasks.filter((task) => task.id === id)[0];\n    task.isDone = newStatus;\n    setTasks([...tasks]);\n  };\n  \n  return (\n    <div className=\"todo-container\">\n        <div className=\"title\">ToDo List</div>\n        <input type=\"text\" onChange={(event) => setNewTaskText(event.target.value)} value={newTaskText} className=\"new-task-input\"/>\n        <button onClick={() => onAdd(newTaskText)} className=\"new-task-button\">Add</button>\n        <table className=\"todo-table\">\n          { tasks.sort((a, b) => (a.isDone ? 1 : 0) - (b.isDone ? 1 : 0)).map((task, ix) => {\n            return (\n              <tr key={task.id}>\n                <td className=\"number-cell\">{ix + 1}.&nbsp;</td>\n                <td className={\"text-cell\" + (task.isDone ? \" crossline-row\" : \"\")}>{task.text}</td>\n                <td className=\"checkbox-cell\">\n                  <input type=\"checkbox\" checked={task.isDone} onChange={() => onTaskToggle(task.id, !task.isDone)} className=\"status-checkbox\" />\n                  <span className=\"checkbox-span\"></span>\n                </td>\n                <td className=\"delete-cell\"><button onClick={() => onDeleteClick(task.id)}>Delete</button></td>\n              </tr>\n            );\n          }) }\n        </table>\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React, {useState} from 'react';\n\nimport './authPage.css';\n\nconst OPEN_SOURCE_GITHUB_IMAGE = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\n\n\nexport function LoginBlock () {\n    const [isRegistration, setIsRegistration] = useState(false);\n\n    return <div className={\"auth-block\"}>\n        <div\n            className={\"login-block-tab\" + (isRegistration ? \"\" : \" enabled-tab\")}\n            onClick={() => setIsRegistration(false)}\n        >\n            Login\n        </div>\n        <div\n            className={\"register-block-tab\" + (isRegistration ? \" enabled-tab\" : \"\")}\n            onClick={() => setIsRegistration(true)}\n        >\n            Register\n        </div>\n        { isRegistration ? (\n            <button className={\"auth-button\"}>\n                <img src={OPEN_SOURCE_GITHUB_IMAGE} width={\"25\"} height={\"25\"} className={\"gh-img\"}></img>\n                <span className={\"auth-text\"}>Sign up with GitHub</span>\n            </button>\n        ) : (\n            <button className={\"auth-button\"}>\n                <img src={OPEN_SOURCE_GITHUB_IMAGE} width={\"25\"} height={\"25\"} className={\"gh-img\"}></img>\n                <span className={\"auth-text\"}>Sign in with GitHub</span>\n            </button>\n        )}\n    </div>\n}\n","const auth = require('@feathersjs/authentication-client');\nconst rest = require('@feathersjs/rest-client');\nconst feathers = require('@feathersjs/feathers');\n\nexport const feathersApp = feathers();\nconst restClient = rest('http://localhost:3030');\nfeathersApp.configure(restClient.fetch(window.fetch));\n\nfeathersApp.configure(auth({\n    storageKey: 'auth'\n}));\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TodoList from './todoList';\nimport { LoginBlock } from './authPage';\nimport {Switch, Route, Link} from 'react-router-dom';\nimport { feathersApp } from './feathers';\n\n\nasync function tryGetAccessToken() {\n  const token = await feathersApp.authentication.getAccessToken();\n  console.log('Current token: ', token);\n\n  return await feathersApp.authentication.getFromLocation(window.location).then(\n        (token: string) => {\n            console.info(\"Got auth token:\", token);\n            if (token !== null) {\n              feathersApp.authentication.setAccessToken(token);\n              console.info(\"Set auth token:\", token);\n              return Promise.resolve(true);\n            }\n            return Promise.resolve(false);\n        },\n    ).catch((e: any) => Promise.resolve(false));\n}\n\n\nfunction App() {\n  const [user, setUser] = useState<any>(null);\n\n  useEffect(() => {\n    async function auth() {\n      await tryGetAccessToken();\n\n      const userData = await feathersApp.authenticate();\n\n      if (userData.user) {\n        console.info('UserData', userData);\n        setUser(userData.user);\n      } else {\n        setUser(null);\n      }\n    }\n\n    auth();\n  });\n\n  return (\n    <div className=\"main-container\">\n      <header className=\"header\">\n          <div className={\"logo\"}>\n              Kisa's ToDo\n          </div>\n          <div className={\"auth-data\"}>\n            { user !== null ? (\n              <Link to={'/todo'}>{`Authorized as ${user!.email}`}</Link>\n            ) : 'Unauthorized user' }\n          </div>\n      </header>\n      <div className=\"content\">\n          <Switch>\n              <Route path='/login' component={LoginBlock} />\n              <Route path='/todo' component={TodoList} />\n          </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n        <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}